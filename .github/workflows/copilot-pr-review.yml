name: Copilot PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  copilot-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Request Copilot Code Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            console.log(`Processing PR #${prNumber} in ${owner}/${repo}`);
            
            // Try multiple approaches to trigger Copilot review
            let reviewRequested = false;
            
            // Approach 1: Try requesting Copilot as reviewer with different identifiers
            const copilotIdentifiers = ['copilot', 'github-copilot[bot]', 'copilot[bot]'];
            
            for (const identifier of copilotIdentifiers) {
              if (reviewRequested) break;
              
              try {
                await github.rest.pulls.requestReviewers({
                  owner,
                  repo,
                  pull_number: prNumber,
                  reviewers: [identifier]
                });
                console.log(`Successfully requested Copilot review with identifier: ${identifier}`);
                reviewRequested = true;
              } catch (error) {
                console.log(`Failed to request review with ${identifier}: ${error.message}`);
              }
            }
            
            // Approach 2: Try team-based assignment
            if (!reviewRequested) {
              try {
                await github.rest.pulls.requestReviewers({
                  owner,
                  repo,
                  pull_number: prNumber,
                  team_reviewers: ['copilot']
                });
                console.log('Successfully requested Copilot team review');
                reviewRequested = true;
              } catch (error) {
                console.log(`Failed to request team review: ${error.message}`);
              }
            }
            
            // Approach 3: Use comment-based triggers
            if (!reviewRequested) {
              const commentBodies = [
                '@copilot review',
                '@copilot please review this PR',
                '@github/copilot review'
              ];
              
              for (const body of commentBodies) {
                try {
                  await github.rest.issues.createComment({
                    issue_number: prNumber,
                    owner,
                    repo,
                    body
                  });
                  console.log(`Posted Copilot review request comment: ${body}`);
                  reviewRequested = true;
                  break;
                } catch (error) {
                  console.log(`Failed to create comment "${body}": ${error.message}`);
                }
              }
            }
            
            if (!reviewRequested) {
              console.log('All Copilot review request methods failed');
              // Post a informational comment
              try {
                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner,
                  repo,
                  body: 'ðŸ¤– Unable to automatically request Copilot review. You can manually request it by commenting `@copilot review`'
                });
              } catch (error) {
                console.log('Failed to post fallback comment:', error.message);
              }
            } else {
              console.log('Copilot review successfully requested!');
            }